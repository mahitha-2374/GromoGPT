// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview AI-driven growth strategy for GroMo Partners.
 *
 * - assessGrowthPotential - A function that assesses a GroMo Partner's growth potential and suggests strategies.
 * - AssessGrowthPotentialInput - The input type for the assessGrowthPotential function.
 * - AssessGrowthPotentialOutput - The return type for the assessGrowthPotential function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AssessGrowthPotentialInputSchema = z.object({
  partnerPerformanceData: z
    .string()
    .describe('The past performance data of the GroMo Partner, including sales, customer profiles, and product categories.'),
  marketTrendsData: z
    .string()
    .describe('The current market trends data for financial products.'),
  partnerActivityData: z
    .string()
    .describe('The recent activity data of the GroMo Partner, including leads contacted and products sold.'),
});
export type AssessGrowthPotentialInput = z.infer<typeof AssessGrowthPotentialInputSchema>;

const AssessGrowthPotentialOutputSchema = z.object({
  riskOfStagnation: z
    .boolean()
    .describe('Whether the GroMo Partner is at risk of stagnation.'),
  suggestedPlaybooks: z
    .string()
    .describe('Custom playbooks to expand into new categories.'),
  suggestedIncomeBoosters: z
    .string()
    .describe('Monthly income boosters based on market trends and personal activity.'),
});
export type AssessGrowthPotentialOutput = z.infer<typeof AssessGrowthPotentialOutputSchema>;

export async function assessGrowthPotential(input: AssessGrowthPotentialInput): Promise<AssessGrowthPotentialOutput> {
  return assessGrowthPotentialFlow(input);
}

const prompt = ai.definePrompt({
  name: 'assessGrowthPotentialPrompt',
  input: {schema: AssessGrowthPotentialInputSchema},
  output: {schema: AssessGrowthPotentialOutputSchema},
  prompt: `You are an AI growth strategist for GroMo Partners, financial micro-entrepreneurs.

  Analyze the GroMo Partner's performance, market trends, and recent activity to determine if they are at risk of stagnation.
  If they are at risk, suggest custom playbooks to expand into new categories and monthly income boosters based on market trends and their activity.

  Partner Performance Data: {{{partnerPerformanceData}}}
  Market Trends Data: {{{marketTrendsData}}}
  Partner Activity Data: {{{partnerActivityData}}}

  Respond with a JSON object containing:
  - riskOfStagnation (boolean): true if the partner is at risk of stagnation, false otherwise.
  - suggestedPlaybooks (string): Custom playbooks to expand into new categories.
  - suggestedIncomeBoosters (string): Monthly income boosters based on market trends and personal activity.
  `,
});

const assessGrowthPotentialFlow = ai.defineFlow(
  {
    name: 'assessGrowthPotentialFlow',
    inputSchema: AssessGrowthPotentialInputSchema,
    outputSchema: AssessGrowthPotentialOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
